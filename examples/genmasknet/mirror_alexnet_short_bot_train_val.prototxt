name: "GenMaskNet" 
layer { name: "data" type: "Data" top: "data" top: "label" 
  include { phase: TRAIN }
  transform_param { 
      mirror: false 
      mean_file: "/mnt/neocortex4/scratch/bhwang/coco/coco_val_1obj_ext20_256x256_img_mean.binaryproto"
  }
  data_param { 
      source: "/mnt/neocortex4/scratch/bhwang/coco/coco_val_1obj_ext20_256x256_img"
      batch_size: 100 
      backend: LMDB 
  }
}
layer { name: "data" type: "Data" top: "data" top: "label" 
  include { phase: TEST }
  transform_param { 
      mirror: false 
      mean_file: "/mnt/neocortex4/scratch/bhwang/coco/coco_val_1obj_ext20_256x256_img_mean.binaryproto"
  }
  data_param { 
      source: "/mnt/neocortex4/scratch/bhwang/coco/coco_val_1obj_ext20_256x256_img"
      batch_size: 100 
      backend: LMDB 
  }
}

#############################################################
###### begin
#############################################################
layer { name: "conv1" type: "Convolution" bottom: "data" top: "conv1" 
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  convolution_param { num_output: 96 kernel_size: 11 stride: 4 
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer { name: "relu1" type: "ReLU" bottom: "conv1" top: "conv1" }
layer { name: "pool1" type: "Pooling" bottom: "conv1" top: "pool1"
  pooling_param { pool: MAX kernel_size: 3 stride: 2 }
}
layer { name: "norm1" type: "LRN" bottom: "pool1" top: "norm1" 
  lrn_param { local_size: 5 alpha: 0.0001 beta: 0.75 }
}

layer { name: "conv2" type: "Convolution" bottom: "norm1" top: "conv2" 
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  convolution_param { num_output: 256 pad: 2 kernel_size: 5 group: 2 
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 1 }
  }
}
layer { name: "relu2" type: "ReLU" bottom: "conv2" top: "conv2" }
layer { name: "pool2" type: "Pooling" bottom: "conv2" top: "pool2" top: "pool2_mask" 
  pooling_param { pool: MAX kernel_size: 3 stride: 2 }
}
layer { name: "norm2" type: "LRN" bottom: "pool2" top: "norm2" 
  lrn_param { local_size: 5 alpha: 0.0001 beta: 0.75 }
}

layer { name: "conv3" type: "Convolution" bottom: "norm2" top: "conv3" 
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  convolution_param { num_output: 384 pad: 1 kernel_size: 3 
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer { name: "relu3" type: "ReLU" bottom: "conv3" top: "conv3" }

layer { name: "conv4" type: "Convolution" bottom: "conv3" top: "conv4" 
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  convolution_param { num_output: 384 pad: 1 kernel_size: 3 group: 2 
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 1 }
  }
}
layer { name: "relu4" type: "ReLU" bottom: "conv4" top: "conv4" }

layer { name: "conv5" type: "Convolution" bottom: "conv4" top: "conv5" 
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  convolution_param { num_output: 256 pad: 1 kernel_size: 3 group: 2 
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 1 }
  }
}
layer { name: "relu5" type: "ReLU" bottom: "conv5" top: "conv5" }
layer { name: "pool5" type: "Pooling" bottom: "conv5" top: "pool5" top: "pool5_mask" 
  pooling_param { pool: MAX kernel_size: 3 stride: 2 }
}

layer { name: "fc6" type: "InnerProduct" bottom: "pool5" top: "fc6" 
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  inner_product_param { num_output: 4096 
    weight_filler { type: "gaussian" std: 0.005 }
    bias_filler { type: "constant" value: 1 }
  }
}
layer { name: "relu6" type: "ReLU" bottom: "fc6" top: "fc6" }
layer { name: "drop6" type: "Dropout" bottom: "fc6" top: "fc6" 
  dropout_param { dropout_ratio: 0.5 }
}

layer { name: "fc7" type: "InnerProduct" bottom: "fc6" top: "fc7" 
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  inner_product_param { num_output: 4096 
    weight_filler { type: "gaussian" std: 0.005 }
    bias_filler { type: "constant" value: 1 }
  }
}
layer { name: "relu7" type: "ReLU" bottom: "fc7" top: "fc7" }
layer { name: "drop7" type: "Dropout" bottom: "fc7" top: "fc7" 
  dropout_param { dropout_ratio: 0.5 }
}

layer { name: "fc8" type: "InnerProduct" bottom: "fc7" top: "fc8" 
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  inner_product_param { num_output: 81 
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}

layer { name: "loss" type: "SoftmaxWithLoss" bottom: "fc8" bottom: "label" top: "softmax_loss" }
layer { name: "accuracy" type: "Accuracy" bottom: "fc8" bottom: "label" top: "accuracy" 
  include { phase: TEST }
}

########################
# top-down mask generation column starts here
########################

layer { name: "fc7_R" type: "InnerProduct" bottom: "fc7" top: "fc7_R" 
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  inner_product_param { num_output: 4096 
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer { name: "fc6_R_flat" type: "InnerProduct" bottom: "fc7_R" top: "fc6_R_flat" 
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  inner_product_param { num_output: 12544 
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}

layer { name: "fc6_R" type: "Reshape" bottom: "fc6_R_flat" top: "fc6_R" 
  reshape_param{ num: 0 channels: 256 height: 7 width: 7 }
}
layer { name: "unpool5" type: "Unpooling" bottom: "fc6_R" bottom: "pool5_mask" top: "unpool5" 
  unpooling_param { unpool: MAX kernel_size: 3 stride: 2 }
}

layer { name: "pre_deconv5_R" type: "Eltwise" bottom: "conv5" bottom: "unpool5" top: "pre_deconv5_R" 
  eltwise_param { operation: PROD }
}
layer { name: "deconv5_R" type: "Deconvolution" bottom: "pre_deconv5_R" top: "deconv5_R" 
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  convolution_param { num_output: 384 pad: 1 kernel_size: 3 group: 2 
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer { name: "relu5_R" type: "ReLU" bottom: "deconv5_R" top: "deconv5_R" }

layer { name: "pre_deconv4_R" type: "Eltwise" bottom: "conv4" bottom: "deconv5_R" top: "pre_deconv4_R" 
  eltwise_param { operation: PROD }
}
layer { name: "deconv4_R" type: "Deconvolution" bottom: "pre_deconv4_R" top: "deconv4_R" 
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  convolution_param { num_output: 384 pad: 1 kernel_size: 3 group: 2 
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer { name: "relu4_R" type: "ReLU" bottom: "deconv4_R" top: "deconv4_R" }

layer { name: "pre_deconv3_R" type: "Eltwise" bottom: "conv3" bottom: "deconv4_R" top: "pre_deconv3_R" 
  eltwise_param { operation: PROD }
}
layer { name: "deconv3_R" type: "Deconvolution" bottom: "pre_deconv3_R" top: "deconv3_R" 
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  convolution_param { num_output: 256 pad: 1 kernel_size: 3
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer { name: "relu3_R" type: "ReLU" bottom: "deconv3_R" top: "deconv3_R" }

layer { name: "unpool2" type: "Unpooling" bottom: "deconv3_R" bottom: "pool2_mask" top: "unpool2" 
  unpooling_param { unpool: MAX kernel_size: 3 stride: 2 }
}

layer { name: "deconvlast_R" type: "Deconvolution" bottom: "unpool2" top: "deconvlast_R" 
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 0 decay_mult: 0 }
  convolution_param { num_output: 2 kernel_size: 16 stride: 8 
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}

layer { name: "segmask_relu" type: "ReLU" bottom: "deconvlast_R" top: "segmask" }

layer { name: "gt_mask" type: "Data" top: "gt_mask" 
  # top: "label_junk"

  include { phase: TRAIN }
  transform_param { mirror: false }
  data_param { 
      source: "/mnt/neocortex4/scratch/bhwang/coco/coco_val_1obj_ext20_256x256_gt_mask"
      batch_size: 100 
      backend: LMDB 
  }
}
layer { name: "gt_mask" type: "Data" top: "gt_mask" 
  # top: "label_junk"

  include { phase: TEST }
  transform_param { mirror: false }
  data_param { 
      source: "/mnt/neocortex4/scratch/bhwang/coco/coco_val_1obj_ext20_256x256_gt_mask"
      batch_size: 100 
      backend: LMDB 
  }
}

layer { name: "softmax_loss" type:"SoftmaxWithLoss" bottom: "segmask" bottom: "gt_mask" top: "e_loss" }
